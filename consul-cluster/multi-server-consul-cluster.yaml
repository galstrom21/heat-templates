heat_template_version: 2014-10-16

description: >
  This template will provision the minimum number of required nodes, as well
  it will setup all of the required lbaas vips.

parameters:
  consul_version:
    type: string
    default: "0.6.4"
  consul_dc_name:
    type: string
    default: "testDC"
  timeout:
    type: number
    description: "Timeout for WaitCondition, depends on your image and environment"
    default: 600
  key_name:
    type: string
  image:
    type: string
  flavor:
    type: string

resources:
  signal_handle:
    type: "OS::Heat::SwiftSignalHandle"

  wait_for_servers:
    type: "OS::Heat::SwiftSignal"
    properties:
      handle: {get_resource: signal_handle}
      count: 3
      timeout: {get_param: timeout}

  cluster_ssh_key:
    type: "OS::Nova::KeyPair"
    properties:
      save_private_key: True
      name: deploy_key

  prepare_consul:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: ssh_priv_key
      - name: ssh_pub_key
      - name: consul_ver
      - name: signal_endpoint
      config: {get_file: templates/prepare_consul.sh}

  bootstrap_consul:
    type: "OS::Heat::SoftwareConfig"
    depends_on: wait_for_servers
    properties:
      group: script
      inputs:
      - name: dc_name
      - name: node1_ip
      - name: node2_ip
      - name: node3_ip
      config: {get_file: templates/run_consul.sh}

  deploy_node1_step1:
    type: "OS::Heat::SoftwareDeployment"
    properties:
      config: {get_resource: prepare_consul}
      server: {get_resource: consul_cluster_server1}
      input_values:
        ssh_priv_key: { get_attr: [ cluster_ssh_key, private_key ] }
        ssh_pub_key: { get_attr: [ cluster_ssh_key, public_key ] }
        consul_ver: { get_param: consul_version }
        #wc_notify: { get_attr: [ 'signal_handle', 'curl_cli' ] }
        signal_endpoint: { get_attr: [ 'signal_handle', 'endpoint' ] }

  deploy_node1_step2:
    type: "OS::Heat::SoftwareDeployment"
    properties:
      config: {get_resource: bootstrap_consul}
      server: {get_resource: consul_cluster_server1}
      input_values:
        dc_name: { get_param: consul_dc_name }
        node1_ip: { get_attr: [ consul_cluster_server1, addresses, private, 0, addr ] }
        node2_ip: { get_attr: [ consul_cluster_server2, addresses, private, 0, addr ] }
        node3_ip: { get_attr: [ consul_cluster_server3, addresses, private, 0, addr ] }

  deploy_node2_step1:
    type: "OS::Heat::SoftwareDeployment"
    properties:
      config: {get_resource: prepare_consul}
      server: {get_resource: consul_cluster_server2}
      input_values:
        ssh_priv_key: { get_attr: [ cluster_ssh_key, private_key ] }
        ssh_pub_key: { get_attr: [ cluster_ssh_key, public_key ] }
        consul_ver: { get_param: consul_version }
        #wc_notify: { get_attr: [ 'signal_handle', 'curl_cli' ] }
        signal_endpoint: { get_attr: [ 'signal_handle', 'endpoint' ] }

  deploy_node2_step2:
    type: "OS::Heat::SoftwareDeployment"
    properties:
      config: {get_resource: bootstrap_consul}
      server: {get_resource: consul_cluster_server2}
      input_values:
        dc_name: { get_param: consul_dc_name }
        node1_ip: { get_attr: [ consul_cluster_server1, addresses, private, 0, addr ] }
        node2_ip: { get_attr: [ consul_cluster_server2, addresses, private, 0, addr ] }
        node3_ip: { get_attr: [ consul_cluster_server3, addresses, private, 0, addr ] }

  deploy_node3_step1:
    type: "OS::Heat::SoftwareDeployment"
    properties:
      config: {get_resource: prepare_consul}
      server: {get_resource: consul_cluster_server3}
      input_values:
        ssh_priv_key: { get_attr: [ cluster_ssh_key, private_key ] }
        ssh_pub_key: { get_attr: [ cluster_ssh_key, public_key ] }
        consul_ver: { get_param: consul_version }
        #wc_notify: { get_attr: [ 'signal_handle', 'curl_cli' ] }
        signal_endpoint: { get_attr: [ 'signal_handle', 'endpoint' ] }

  deploy_node3_step2:
    type: "OS::Heat::SoftwareDeployment"
    properties:
      config: {get_resource: bootstrap_consul}
      server: {get_resource: consul_cluster_server3}
      input_values:
        dc_name: { get_param: consul_dc_name }
        node1_ip: { get_attr: [ consul_cluster_server1, addresses, private, 0, addr ] }
        node2_ip: { get_attr: [ consul_cluster_server2, addresses, private, 0, addr ] }
        node3_ip: { get_attr: [ consul_cluster_server3, addresses, private, 0, addr ] }

  boot_config:
    type: "Heat::InstallConfigAgent"

  consul_cluster_server1:
    type: "OS::Nova::Server"
    properties:
      flavor: 2 GB General Purpose v1
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)
      key_name: shep
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_attr: [boot_config, config]}

  consul_cluster_server2:
    type: "OS::Nova::Server"
    properties:
      flavor: 2 GB General Purpose v1
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)
      key_name: shep
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_attr: [boot_config, config]}

  consul_cluster_server3:
    type: "OS::Nova::Server"
    properties:
      flavor: 2 GB General Purpose v1
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)
      key_name: shep
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_attr: [boot_config, config]}

outputs:
  deploy_ssh_priv_key:
    value: { get_attr: [ cluster_ssh_key, private_key ] }
  deploy_ssh_pub_key:
    value: { get_attr: [ cluster_ssh_key, public_key ] }
  signal_cli:
    value: { get_attr: [ 'signal_handle', 'curl_cli' ] }
  signal_endpoint:
    value: { get_attr: [ 'signal_handle', 'endpoint' ] }
  signal_data:
    value: { get_attr: [ 'wait_for_servers', 'data' ] }
